# Generated by Django 5.2.1 on 2025-08-03 13:05

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('recipes', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='NutritionProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_fiber', models.FloatField(default=25.0, verbose_name='食物繊維目標 (g)')),
                ('target_sodium_max', models.FloatField(default=2300.0, verbose_name='ナトリウム上限 (mg)')),
                ('target_sugar_max', models.FloatField(default=50.0, verbose_name='糖質上限 (g)')),
                ('target_calcium', models.FloatField(default=800.0, verbose_name='カルシウム目標 (mg)')),
                ('target_iron', models.FloatField(default=10.0, verbose_name='鉄分目標 (mg)')),
                ('target_vitamin_c', models.FloatField(default=100.0, verbose_name='ビタミンC目標 (mg)')),
                ('optimization_weights', models.JSONField(default=dict, help_text='各栄養素の重要度設定', verbose_name='最適化重み')),
                ('dietary_restrictions', models.JSONField(default=list, help_text='アレルギーや食事制限のリスト', verbose_name='食事制限')),
                ('daily_budget_max', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='1日の食費上限 (円)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AlterModelOptions(
            name='ingredient',
            options={'ordering': ['category', 'name']},
        ),
        migrations.AlterModelOptions(
            name='recipe',
            options={'ordering': ['-optimization_priority', 'title']},
        ),
        migrations.AddField(
            model_name='ingredient',
            name='calories_per_unit',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='単位あたりカロリー'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='category',
            field=models.CharField(choices=[('protein', 'タンパク質源'), ('carb', '炭水化物源'), ('vegetable', '野菜'), ('fruit', '果物'), ('dairy', '乳製品'), ('fat', '油脂'), ('seasoning', '調味料'), ('other', 'その他')], default='other', max_length=30, verbose_name='材料カテゴリ'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='contains_dairy',
            field=models.BooleanField(default=False, verbose_name='乳製品含有'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='contains_gluten',
            field=models.BooleanField(default=False, verbose_name='グルテン含有'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='contains_nuts',
            field=models.BooleanField(default=False, verbose_name='ナッツ類含有'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='contains_soy',
            field=models.BooleanField(default=False, verbose_name='大豆含有'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='is_optional',
            field=models.BooleanField(default=False, verbose_name='オプション材料'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='cook_time',
            field=models.PositiveIntegerField(default=0, verbose_name='調理時間（分）'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='作成日時'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='recipe',
            name='cuisine_type',
            field=models.CharField(choices=[('japanese', '和食'), ('western', '洋食'), ('chinese', '中華'), ('korean', '韓国料理'), ('italian', 'イタリアン'), ('other', 'その他')], default='japanese', max_length=30, verbose_name='料理ジャンル'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='difficulty',
            field=models.CharField(choices=[('easy', '簡単'), ('medium', '普通'), ('hard', '難しい')], default='medium', max_length=10, verbose_name='難易度'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='estimated_cost',
            field=models.DecimalField(decimal_places=2, default=0, help_text='1人分の推定コスト', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='推定コスト (円)'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='is_active',
            field=models.BooleanField(default=True, verbose_name='有効'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='is_dairy_free',
            field=models.BooleanField(default=False, verbose_name='乳製品不使用'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='is_gluten_free',
            field=models.BooleanField(default=False, verbose_name='グルテンフリー'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='is_vegan',
            field=models.BooleanField(default=False, verbose_name='ビーガン対応'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='is_vegetarian',
            field=models.BooleanField(default=False, verbose_name='ベジタリアン対応'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='meal_type',
            field=models.CharField(choices=[('breakfast', '朝食'), ('lunch', '昼食'), ('dinner', '夕食'), ('snack', '間食'), ('any', '任意')], default='any', max_length=20, verbose_name='食事タイプ'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='nutritional_density_score',
            field=models.FloatField(default=0, help_text='カロリー当たりの栄養価（自動計算）', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='栄養密度スコア'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='optimization_priority',
            field=models.IntegerField(default=1, help_text='線形計画法での優先度（1=低, 10=高）', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='最適化優先度'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='prep_time',
            field=models.PositiveIntegerField(default=0, verbose_name='準備時間（分）'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='servings',
            field=models.PositiveIntegerField(default=1, verbose_name='何人分'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='total_calcium',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='カルシウム (mg)'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='total_fiber',
            field=models.FloatField(default=0, help_text='消化器官の健康に重要', validators=[django.core.validators.MinValueValidator(0)], verbose_name='食物繊維 (g)'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='total_iron',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='鉄分 (mg)'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='total_sodium',
            field=models.FloatField(default=0, help_text='塩分制限に使用', validators=[django.core.validators.MinValueValidator(0)], verbose_name='ナトリウム (mg)'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='total_sugar',
            field=models.FloatField(default=0, help_text='炭水化物の内、糖質の量', validators=[django.core.validators.MinValueValidator(0)], verbose_name='糖質 (g)'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='total_vitamin_c',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='ビタミンC (mg)'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='total_vitamin_d',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='ビタミンD (μg)'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='更新日時'),
        ),
        migrations.AlterField(
            model_name='recipe',
            name='total_calories',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='総カロリー (kcal)'),
        ),
        migrations.AlterField(
            model_name='recipe',
            name='total_carbohydrates',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='総炭水化物 (g)'),
        ),
        migrations.AlterField(
            model_name='recipe',
            name='total_fat',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='総脂質 (g)'),
        ),
        migrations.AlterField(
            model_name='recipe',
            name='total_protein',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='総タンパク質 (g)'),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['meal_type', 'is_active'], name='recipes_rec_meal_ty_cd0ee0_idx'),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['total_protein', 'total_calories'], name='recipes_rec_total_p_1613c1_idx'),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['optimization_priority'], name='recipes_rec_optimiz_21bf02_idx'),
        ),
        migrations.AddField(
            model_name='nutritionprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='nutrition_profile', to=settings.AUTH_USER_MODEL),
        ),
    ]
